{"version":3,"file":"ngx-modialog-js-native.es5.js","sources":["../../../../../src/ngx-modialog/plugins/js-native/src/js-native.module.ts","../../../../../src/ngx-modialog/plugins/js-native/src/modal.ts","../../../../../src/ngx-modialog/plugins/js-native/src/presets/js-native-preset.ts","../../../../../src/ngx-modialog/plugins/js-native/src/js-native-modal-renderer.ts","../../../../../src/ngx-modialog/plugins/js-native/src/modal-context.ts"],"sourcesContent":["import { NgModule } from '@angular/core';\n\nimport { Modal as BaseModal } from 'ngx-modialog';\n\nimport { Modal } from './modal';\n\nexport const providers: any[] = [\n  { provide: BaseModal, useClass: Modal },\n  { provide: Modal, useClass: Modal }\n];\n\n@NgModule({\n  providers\n})\nexport class JSNativeModalModule {\n\n  static getProviders(): any[] {\n    return providers;\n  }\n\n}\n","import { Injectable } from '@angular/core';\n\nimport {\n  DialogRef,\n  Overlay,\n  DROP_IN_TYPE,\n  Modal as Modal_\n} from 'ngx-modialog';\n\nimport { JSNativePresetBuilder } from './presets/js-native-preset';\n\n@Injectable()\nexport class Modal extends Modal_ {\n  constructor(overlay: Overlay) {\n    super(overlay);\n  }\n\n  alert(): JSNativePresetBuilder {\n    return new JSNativePresetBuilder(this, DROP_IN_TYPE.alert);\n  }\n\n  prompt(): JSNativePresetBuilder {\n    return new JSNativePresetBuilder(this, DROP_IN_TYPE.prompt);\n  }\n\n  confirm(): JSNativePresetBuilder {\n    return new JSNativePresetBuilder(this, DROP_IN_TYPE.confirm);\n  }\n\n  protected create(dialogRef: DialogRef<any>, type: any): DialogRef<any> {\n    return dialogRef;\n  }\n\n}\n\n\n\n","import { ViewContainerRef } from '@angular/core';\nimport { DialogRef, DROP_IN_TYPE, OverlayConfig } from 'ngx-modialog';\nimport { Modal } from '../modal';\n\nimport {\n  JSNativeModalContext,\n  JSNativeModalContextBuilder\n} from '../modal-context';\nimport { JSNativeModalRenderer } from '../js-native-modal-renderer';\n\nexport class JSNativePresetBuilder extends JSNativeModalContextBuilder<JSNativeModalContext> {\n\n  constructor(modal: Modal, dialogType: DROP_IN_TYPE) {\n    super(<any>{modal, dialogType});\n  }\n\n  /**\n   * Open a modal window based on the configuration of this config instance.\n   * @param viewContainer If set opens the modal inside the supplied viewContainer\n   */\n  open(viewContainer?: ViewContainerRef): DialogRef<JSNativeModalContext> {\n    let context: JSNativeModalContext = this.toJSON();\n\n    if (!(context.modal instanceof Modal)) {\n      return <any>Promise.reject(new Error('Configuration Error: modal service not set.'));\n    }\n\n    this.$$beforeOpen(context);\n\n    let overlayConfig: OverlayConfig = {\n      context: context,\n      renderer: new JSNativeModalRenderer(),\n      viewContainer: viewContainer\n    };\n\n    return context.modal.open(context.component, overlayConfig);\n  }\n}\n\n","import {\n  ViewContainerRef,\n  ComponentRef,\n  Injectable\n} from '@angular/core';\n\nimport {\n  DROP_IN_TYPE,\n  DialogRef,\n  OverlayRenderer,\n  ModalOverlay\n} from 'ngx-modialog';\n\n@Injectable()\nexport class JSNativeModalRenderer implements OverlayRenderer {\n\n  render(dialog: DialogRef<any>, vcRef: ViewContainerRef): ComponentRef<ModalOverlay> {\n\n    let result: string | boolean;\n    switch (dialog.context.dialogType) {\n      case DROP_IN_TYPE.alert:\n        window.alert(dialog.context.message);\n        result = true;\n        break;\n      case DROP_IN_TYPE.prompt:\n        result = window.prompt(dialog.context.message, dialog.context.promptDefault);\n        break;\n      case DROP_IN_TYPE.confirm:\n        result = window.confirm(dialog.context.message);\n        break;\n    }\n\n    dialog.destroy = () => {\n    };\n\n    if (result === false) {\n      dialog.dismiss();\n    } else {\n      dialog.close(result);\n    }\n\n    // we need to return ComponentRef<ModalOverlay> but a native dialog does'nt have that\n    // so we resolve an empty promise, the user of this renderer should expect that.\n    return {} as any;\n  }\n}\n\n","import {\n  DROP_IN_TYPE,\n  ModalOpenContextBuilder,\n  ModalOpenContext,\n  FluentAssignMethod,\n  arrayUnion\n} from 'ngx-modialog';\n\nconst DEFAULT_SETTERS = [\n  'promptDefault'\n];\n\nexport class JSNativeModalContext extends ModalOpenContext {\n  promptDefault: string;\n  dialogType: DROP_IN_TYPE;\n\n  normalize(): void {\n    if (!this.message) this.message = '';\n    if (this.dialogType === undefined) this.dialogType = DROP_IN_TYPE.alert;\n  }\n}\n\n\nexport class JSNativeModalContextBuilder<T extends JSNativeModalContext>\nextends ModalOpenContextBuilder<T> {\n\n  /**\n   * The default value for the prompt input\n   */\n  promptDefault: FluentAssignMethod<string, this>;\n\n  constructor(defaultValues: T = undefined,\n              initialSetters: string[] = undefined,\n              baseType: new () => T = undefined) {\n    super(\n      defaultValues || <any>{},\n      arrayUnion<string>(DEFAULT_SETTERS, initialSetters || []),\n      baseType || <any>JSNativeModalContext\n      // https://github.com/Microsoft/TypeScript/issues/7234\n    );\n  }\n}\n"],"names":["Modal","BaseModal","Modal_"],"mappings":"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"}