{"version":3,"file":"ngx-modialog-bootstrap.es5.js","sources":["../../../../../src/ngx-modialog/plugins/bootstrap/src/bootstrap.module.ts","../../../../../src/ngx-modialog/plugins/bootstrap/src/modal.ts","../../../../../src/ngx-modialog/plugins/bootstrap/src/presets/two-button-preset.ts","../../../../../src/ngx-modialog/plugins/bootstrap/src/presets/one-button-preset.ts","../../../../../src/ngx-modialog/plugins/bootstrap/src/presets/message-modal-preset.ts","../../../../../src/ngx-modialog/plugins/bootstrap/src/message-modal.component.ts","../../../../../src/ngx-modialog/plugins/bootstrap/src/modal-container.component.ts","../../../../../src/ngx-modialog/plugins/bootstrap/src/modal-context.ts"],"sourcesContent":["import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ModalModule, Modal as BaseModal } from 'ngx-modialog';\n\nimport { Modal } from './modal';\nimport { BSModalContainer } from './modal-container.component';\nimport {\n  BSMessageModal,\n  BSMessageModalTitle,\n  BSMessageModalBody,\n  BSModalFooter\n} from './message-modal.component';\n\nexport const providers: any[] = [\n  { provide: BaseModal, useClass: Modal },\n  { provide: Modal, useClass: Modal }\n];\n\n@NgModule({\n  imports: [ ModalModule, CommonModule ],\n  declarations: [\n    BSModalFooter,\n    BSMessageModalTitle,\n    BSMessageModalBody,\n    BSMessageModal,\n    BSModalContainer\n  ],\n  providers,\n  entryComponents: [\n    BSModalContainer,\n    BSMessageModal\n  ]\n})\nexport class BootstrapModalModule {\n  static getProviders(): any[] {\n    return providers;\n  }\n}\n\n","import { combineLatest } from 'rxjs/operator/combineLatest';\nimport { Injectable } from '@angular/core';\n\nimport {\n  ContainerContent,\n  Overlay,\n  DialogRef,\n  Modal as Modal_,\n  CSSBackdrop,\n  PromiseCompleter\n} from 'ngx-modialog';\n\nimport { BSModalContainer } from './modal-container.component';\n\nimport { OneButtonPresetBuilder } from './presets/one-button-preset';\nimport { TwoButtonPresetBuilder, PromptPresetBuilder } from './presets/two-button-preset';\n\n// TODO: use DI factory for this.\n// TODO: consolidate dup code\nconst isDoc: boolean = !(typeof document === 'undefined' || !document);\n\nlet animationClass: string = 'in';\n\n/**\n * Execute this method to flag that you are working with Bootstrap version 4.\n */\nexport function bootstrap4Mode(): void {\n  animationClass = 'show';\n}\n\n@Injectable()\nexport class Modal extends Modal_ {\n  constructor(overlay: Overlay) {\n    super(overlay);\n  }\n\n  alert(): OneButtonPresetBuilder {\n    return new OneButtonPresetBuilder(this, <any>{isBlocking: false});\n  }\n\n  prompt(): PromptPresetBuilder {\n    return new PromptPresetBuilder(this, <any>{isBlocking: true, keyboard: null});\n  }\n\n  confirm(): TwoButtonPresetBuilder {\n    return new TwoButtonPresetBuilder(this, <any>{isBlocking: true, keyboard: null});\n  }\n\n  protected create(dialogRef: DialogRef<any>, content: ContainerContent): DialogRef<any> {\n\n    const backdropRef = this.createBackdrop(dialogRef, CSSBackdrop);\n    const containerRef = this.createContainer(dialogRef, BSModalContainer, content);\n\n    let overlay = dialogRef.overlayRef.instance;\n    let backdrop = backdropRef.instance;\n    let container = containerRef.instance;\n\n    dialogRef.inElement ? overlay.insideElement() : overlay.fullscreen();\n\n    // add body class if this is the only dialog in the stack\n    if (isDoc && !document.body.classList.contains('modal-open')) {\n      document.body.classList.add('modal-open');\n    }\n\n\n    if (dialogRef.inElement) {\n      backdrop.setStyle('position', 'absolute');\n    }\n    backdrop.addClass('modal-backdrop fade', true);\n\n    backdrop.addClass(animationClass);\n    container.addClass(animationClass);\n\n    if (containerRef.location.nativeElement) {\n      containerRef.location.nativeElement.focus();\n    }\n\n    overlay.beforeDestroy(() => {\n      const completer = new PromiseCompleter<void>();\n      backdrop.removeClass(animationClass);\n      container.removeClass(animationClass);\n\n      combineLatest.call(backdrop.myAnimationEnd$(), container.myAnimationEnd$(), (s1, s2) => [s1,s2])\n        .subscribe( sources => {\n          isDoc && this.overlay.groupStackLength(dialogRef) === 1 && document.body.classList.remove('modal-open');\n          completer.resolve();\n        });\n\n      return completer.promise;\n    });\n\n    return dialogRef;\n  }\n}\n","import {\n  Modal,\n  FluentAssignMethod,\n  extend,\n  arrayUnion\n} from 'ngx-modialog';\nimport { BSMessageModal } from '../message-modal.component';\nimport { MessageModalPresetBuilder } from './message-modal-preset';\nimport { OneButtonPreset } from './one-button-preset';\n\n\nexport interface TwoButtonPreset extends OneButtonPreset {\n  /**\n   * Caption for the Cancel button.\n   * Default: Cancel\n   */\n  cancelBtn: string;\n\n  /**\n   * A Class for the Cancel button.\n   * Default: btn btn-default\n   */\n  cancelBtnClass: string;\n}\n\n/** Common two button preset */\nexport abstract class AbstractTwoButtonPresetBuilder extends MessageModalPresetBuilder<TwoButtonPreset> {\n  okBtn: FluentAssignMethod<string, this>;\n  okBtnClass: FluentAssignMethod<string, this>;\n  cancelBtn: FluentAssignMethod<string, this>;\n  cancelBtnClass: FluentAssignMethod<string, this>;\n\n  constructor(modal: Modal, defaultValues: TwoButtonPreset = undefined,\n              initialSetters: string[] = []) {\n    super(extend<any>({\n      modal: modal,\n      okBtn: 'OK',\n      okBtnClass: 'btn btn-primary',\n      cancelBtn: 'Cancel',\n      cancelBtnClass: 'btn btn-default'\n    }, defaultValues || {}), arrayUnion<string>([\n      'okBtn',\n      'okBtnClass',\n      'cancelBtn',\n      'cancelBtnClass',\n    ], initialSetters));\n  }\n\n  $$beforeOpen(config: TwoButtonPreset): void {\n    super.$$beforeOpen(config);\n    this.addButton(\n      config.cancelBtnClass,\n      config.cancelBtn,\n      (cmp: BSMessageModal, $event: MouseEvent) => cmp.dialog.dismiss()\n    );\n  }\n}\n\n/**\n * A Preset for a classic 2 button modal window.\n */\nexport class TwoButtonPresetBuilder extends AbstractTwoButtonPresetBuilder {\n\n  constructor(modal: Modal, defaultValues: TwoButtonPreset = undefined) {\n    super(modal, defaultValues);\n  }\n\n  $$beforeOpen(config: TwoButtonPreset): void {\n    super.$$beforeOpen(config);\n    this.addButton(\n      config.okBtnClass,\n      config.okBtn,\n      (cmp: BSMessageModal, $event: MouseEvent) => cmp.dialog.close(true)\n    );\n  }\n}\n\nexport interface PromptPreset extends TwoButtonPreset {\n  showInput: boolean;\n  /** Default value shown in the prompt. */\n  defaultValue: string;\n  /** A placeholder for the input element. */\n  placeholder: string;\n\n}\n\nexport class PromptPresetBuilder extends AbstractTwoButtonPresetBuilder {\n  placeholder: FluentAssignMethod<string, this>;\n  defaultValue: FluentAssignMethod<string, this>;\n\n  constructor(modal: Modal, defaultValues: PromptPreset = undefined) {\n    super(modal, extend<any>({showInput: true, defaultValue: ''}, defaultValues || {}),\n      ['placeholder', 'defaultValue']);\n  }\n\n  $$beforeOpen(config: PromptPreset): void {\n    super.$$beforeOpen(config);\n    this.addButton(\n      config.okBtnClass,\n      config.okBtn,\n      (cmp: BSMessageModal, $event: MouseEvent) =>\n        cmp.dialog.close((cmp.dialog.context as PromptPreset).defaultValue)\n    );\n  }\n}\n\n","import { Modal, FluentAssignMethod, extend } from 'ngx-modialog';\nimport { BSMessageModal } from '../message-modal.component';\nimport { MessageModalPresetBuilder, MessageModalPreset } from './message-modal-preset';\n\nexport interface OneButtonPreset extends MessageModalPreset {\n  /**\n   * Caption for the OK button.\n   * Default: OK\n   */\n  okBtn: string;\n\n  /**\n   * A Class for the OK button.\n   * Default: btn btn-primary\n   */\n  okBtnClass: string;\n}\n\n/**\n * A Preset for a classic 1 button modal window.\n */\nexport class OneButtonPresetBuilder extends MessageModalPresetBuilder<OneButtonPreset> {\n  okBtn: FluentAssignMethod<string, this>;\n  okBtnClass: FluentAssignMethod<string, this>;\n\n  constructor(modal: Modal, defaultValues: OneButtonPreset = undefined) {\n    super(extend<any>({\n      modal: modal,\n      okBtn: 'OK',\n      okBtnClass: 'btn btn-primary'\n    }, defaultValues || {}), [\n      'okBtn',\n      'okBtnClass'\n    ]);\n  }\n\n  $$beforeOpen(config: OneButtonPreset): void {\n    super.$$beforeOpen(config);\n\n    this.addButton(\n      config.okBtnClass,\n      config.okBtn,\n      (cmp: BSMessageModal, $event: MouseEvent) => cmp.dialog.close(true)\n    );\n  }\n}\n\n","import {\n  FluentAssignMethod,\n  privateKey,\n  setAssignAlias,\n  extend,\n  arrayUnion\n} from 'ngx-modialog';\nimport {\n  BSMessageModal,\n  BSMessageModalButtonConfig,\n  BSMessageModalButtonHandler\n} from '../message-modal.component';\nimport { BSModalContext, BSModalContextBuilder }  from '../modal-context';\n\n\nconst DEFAULT_VALUES = {\n  component: BSMessageModal,\n  headerClass: 'modal-header',\n  bodyClass: 'modal-body',\n  footerClass: 'modal-footer'\n};\n\nconst DEFAULT_SETTERS = [\n  'headerClass',\n  'title',\n  'titleHtml',\n  'bodyClass',\n  'footerClass'\n];\n\n\n/**\n * Data definition\n */\nexport interface MessageModalPreset extends BSModalContext {\n\n  /**\n   * A Class for the header (title) container.\n   * Default: modal-header\n   */\n  headerClass: string;\n\n  /**\n   * Caption for the title, enclosed in a H3 container.\n   */\n  title: string;\n\n  /**\n   * HTML for the title, if set overrides title property.\n   * The HTML is wrapped in a DIV element, inside the header container.\n   * Example:\n   <div class=\"modal-header\">\n   <div> HTML CONTENT INSERTED HERE </div>\n   </div>\n   * Note: HTML is not compiled.\n   */\n  titleHtml: string;\n\n  /**\n   * aliased by 'body'\n   * @aliasedBy body\n   */\n  message: string;\n\n  /**\n   * The body of the modal.\n   * Can be either text or HTML.\n   * Note: When using HTML, the template is not compiled. (binding and expression will not parse)\n   * @aliasOf message\n   */\n  body: string;\n\n  /**\n   * A Class for the body container.\n   * Default: modal-body\n   */\n  bodyClass: string;\n\n  /**\n   * A Class for the footer container.\n   * Default: modal-footer\n   */\n  footerClass: string;\n\n  buttons: BSMessageModalButtonConfig[];\n  showInput?: any;\n}\n\n/**\n * A Preset representing the configuration needed to open MessageModal.\n * This is an abstract implementation with no concrete behaviour.\n * Use derived implementation.\n */\nexport abstract class MessageModalPresetBuilder<T extends MessageModalPreset>\n                                                extends BSModalContextBuilder<T> {\n\n  /**\n   * A Class for the header (title) container.\n   * Default: modal-header\n   */\n  headerClass: FluentAssignMethod<string, this>;\n\n  /**\n   * Caption for the title, enclosed in a H3 container.\n   */\n  title: FluentAssignMethod<string, this>;\n\n  /**\n   * HTML for the title, if set overrides title property.\n   * The HTML is wrapped in a DIV element, inside the header container.\n   * Example:\n   <div class=\"modal-header\">\n   <div> HTML CONTENT INSERTED HERE </div>\n   </div>\n   * Note: HTML is not compiled.\n   */\n  titleHtml: FluentAssignMethod<string, this>;\n\n  /**\n   * aliased by 'body'\n   * @aliasedBy body\n   */\n  message: FluentAssignMethod<string, this>;\n\n  /**\n   * The body of the modal.\n   * Can be either text or HTML.\n   * Note: When using HTML, the template is not compiled. (binding and expression will not parse)\n   * @aliasOf message\n   */\n  body: FluentAssignMethod<string, this>;\n\n  /**\n   * A Class for the body container.\n   * Default: modal-body\n   */\n  bodyClass: FluentAssignMethod<string, this>;\n\n  /**\n   * A Class for the footer container.\n   * Default: modal-footer\n   */\n  footerClass: FluentAssignMethod<string, this>;\n\n  constructor(defaultValues: T = undefined,\n              initialSetters: string[] = undefined,\n              baseType: new () => T = undefined) {\n    super(\n      extend<any>(extend({buttons: []}, DEFAULT_VALUES), defaultValues || {}),\n      arrayUnion<string>(DEFAULT_SETTERS, initialSetters || []),\n      baseType\n    );\n\n    setAssignAlias(this, 'body', 'message', true);\n  }\n\n  addButton(css: string, caption: string, onClick: BSMessageModalButtonHandler): this {\n    let btn = {\n      cssClass: css,\n      caption: caption,\n      onClick: onClick\n    };\n\n    let key = privateKey('buttons');\n    (this[key] as BSMessageModalButtonConfig[]).push(btn);\n\n    return this;\n  }\n}\n","import { Component, ViewEncapsulation } from '@angular/core';\n\nimport { DialogRef, ModalComponent } from 'ngx-modialog';\n\nimport { MessageModalPreset } from'./presets/message-modal-preset';\n\nexport interface BSMessageModalButtonHandler {\n  (cmp: ModalComponent<MessageModalPreset>, $event: MouseEvent): void;\n}\n\n/**\n * Interface for button definition\n */\nexport interface BSMessageModalButtonConfig {\n  cssClass: string;\n  caption: string;\n  onClick: BSMessageModalButtonHandler;\n}\n\n@Component({\n  selector: 'modal-title',\n  encapsulation: ViewEncapsulation.None,\n  template: `<div [ngClass]=\"context.headerClass\" [ngSwitch]=\"titleHtml\">\n      <button *ngIf=\"context.showClose\" type=\"button\" class=\"close\" \n              aria-label=\"Close\" (click)=\"dialog.dismiss()\">\n          <span aria-hidden=\"true\">×</span>\n      </button>\n      <div *ngSwitchCase=\"1\" [innerHtml]=\"context.titleHtml\"></div>\n      <h3 *ngSwitchDefault class=\"modal-title\">{{context.title}}</h3>\n </div>`\n})\nexport class BSMessageModalTitle {\n  public context: MessageModalPreset;\n\n  constructor(public dialog: DialogRef<MessageModalPreset>) {\n    this.context = dialog.context;\n  }\n\n  get titleHtml(): number {\n    return this.context.titleHtml ? 1 : 0;\n  }\n}\n\n@Component({\n  selector: 'modal-body',\n  encapsulation: ViewEncapsulation.None,\n  styles: [`.form-group {\n    margin-top: 10px;\n  }`],\n  template: `<div [ngClass]=\"context.bodyClass\"> \n    <div [innerHtml]=\"context.message\"></div>\n      <div *ngIf=\"context.showInput\" class=\"form-group\">\n        <input autofocus #input\n            name=\"bootstrap\" \n            type=\"text\" \n            class=\"form-control\"\n            [value]=\"context.defaultValue\"\n            (change)=\"context.defaultValue = input.value\"  \n            placeholder=\"{{context.placeholder}}\">\n      </div>\n    </div>\n`\n})\nexport class BSMessageModalBody {\n  public context: MessageModalPreset;\n\n  constructor(public dialog: DialogRef<MessageModalPreset>) {\n    this.context = dialog.context;\n  }\n}\n\n\n/**\n * Represents the modal footer for storing buttons.\n */\n@Component({\n  selector: 'modal-footer',\n  encapsulation: ViewEncapsulation.None,\n  template: `<div [ngClass]=\"dialog.context.footerClass\">\n    <button *ngFor=\"let btn of dialog.context.buttons;\"\n            [ngClass]=\"btn.cssClass\"\n            (click)=\"onClick(btn, $event)\">{{btn.caption}}</button>\n</div>`\n})\nexport class BSModalFooter {\n  constructor(public dialog: DialogRef<MessageModalPreset>) {\n  }\n\n  onClick(btn: BSMessageModalButtonConfig, $event: MouseEvent) {\n    $event.stopPropagation();\n    btn.onClick(this, $event);\n  }\n}\n\n/**\n * A Component representing a generic bootstrap modal content element.\n *\n * By configuring a MessageModalContext instance you can:\n *\n *  Header:\n *      - Set header container class (default: modal-header)\n *      - Set title text (enclosed in H3 element)\n *      - Set title html (overrides text)\n *\n *  Body:\n *      - Set body container class.  (default: modal-body)\n *      - Set body container HTML.\n *\n *  Footer:\n *      - Set footer class.  (default: modal-footer)\n *      - Set button configuration (from 0 to n)\n */\n@Component({\n  selector: 'modal-content',\n  encapsulation: ViewEncapsulation.None,\n  template: `<modal-title></modal-title><modal-body></modal-body><modal-footer></modal-footer>`\n})\nexport class BSMessageModal implements ModalComponent<MessageModalPreset> {\n  constructor(public dialog: DialogRef<MessageModalPreset>) {\n  }\n}\n","import {\n  Component,\n  ElementRef,\n  ViewEncapsulation,\n  Renderer2\n} from '@angular/core';\n\nimport { BaseDynamicComponent, DialogRef } from 'ngx-modialog';\n\nimport { MessageModalPreset } from'./presets/message-modal-preset';\n\n@Component({\n  selector: 'bs-modal-container',\n  host: {\n    'tabindex': '-1',\n    'role': 'dialog',\n    'class': 'modal fade',\n    'style': 'position: absolute; display: block'\n  },\n  encapsulation: ViewEncapsulation.None,\n  template:\n`<div [ngClass]=\"dialog.context.dialogClass\" \n      [class.modal-lg]=\"dialog.context.size == \\'lg\\'\"\n      [class.modal-sm]=\"dialog.context.size == \\'sm\\'\">\n  <div class=\"modal-content\" style=\"display:block\" role=\"document\" overlayDialogBoundary>\n    <ng-content></ng-content>\n  </div>    \n</div>`\n})\nexport class BSModalContainer extends BaseDynamicComponent {\n   constructor(public dialog: DialogRef<MessageModalPreset>,\n              el: ElementRef, renderer: Renderer2) {\n    super(el, renderer);\n    this.activateAnimationListener();\n  }\n}\n","import {\n  ModalOpenContext,\n  ModalOpenContextBuilder,\n  FluentAssignMethod,\n  extend,\n  arrayUnion\n} from 'ngx-modialog';\n\nconst DEFAULT_VALUES = {\n    dialogClass: 'modal-dialog',\n    showClose: false\n};\n\nconst DEFAULT_SETTERS = [\n    'dialogClass',\n    'size',\n    'showClose'\n];\n\n\nexport type BootstrapModalSize = 'sm' | 'lg';\n\nexport class BSModalContext extends ModalOpenContext {\n    /**\n     * A Class for the modal dialog container.\n     * Default: modal-dialog\n     */\n    dialogClass: string;\n\n    /**\n     * Size of the modal. 'lg' or 'sm' only.\n     *\n     * If you want to use custom sizes leave this empty and set the dialogClass property.\n     * e.g: dialogClass = 'modal-dialog my-custom-dialog`\n     * NOTE: No validation.\n     * Default: ''\n     */\n    size: BootstrapModalSize;\n\n    /**\n     * When true, show a close button on the top right corner.\n     */\n    showClose: boolean;\n    \n\n    normalize(): void {\n        if (!this.dialogClass) {\n            this.dialogClass = DEFAULT_VALUES.dialogClass;\n        }\n\n        super.normalize();\n    }\n}\n\n\nexport class BSModalContextBuilder<T extends BSModalContext> extends ModalOpenContextBuilder<T> {\n    /**\n     * A Class for the modal dialog container.\n     * Default: modal-dialog\n     */\n    dialogClass: FluentAssignMethod<string, this>;\n\n    /**\n     * Size of the modal. 'lg' or 'sm' only.\n     *\n     * If you want to use custom sizes leave this empty and set the dialogClass property.\n     * e.g: dialogClass = 'modal-dialog my-custom-dialog`\n     * NOTE: No validation.\n     * Default: ''\n     */\n    size: FluentAssignMethod<BootstrapModalSize, this>;\n\n\n    /**\n     * When true, show a close button on the top right corner.\n     */\n    showClose: FluentAssignMethod<boolean, this>;\n    \n    constructor(\n        defaultValues: T = undefined,\n        initialSetters: string[] = undefined,\n        baseType: any = undefined\n    ) {\n        super(\n            extend<any>(DEFAULT_VALUES, defaultValues || {}),\n            arrayUnion<string>(DEFAULT_SETTERS, initialSetters || []),\n            baseType || <any>BSModalContext // https://github.com/Microsoft/TypeScript/issues/7234\n        );\n    }\n}\n\n"],"names":["Modal","BaseModal","Modal_","DEFAULT_VALUES","DEFAULT_SETTERS"],"mappings":"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"}